// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  user
  admin
}

model UserApiUsage {
  id     String   @id @default(uuid())
  date   DateTime
  count  Int
  User   User?    @relation(fields: [userId], references: [id])
  userId String?
}

model User {
  id       String         @id @default(uuid())
  username String         @unique
  role     Role           @default(user)
  api_key  String?        @unique
  usage    UserApiUsage[]
}

model Driver {
  id              String         @id @default(uuid())
  first_name      String
  last_name       String
  birthdate       DateTime
  nationality     String
  current_team    Constructor?   @relation(fields: [current_team_id], references: [id])
  current_team_id String?
  qualifying      Qualifying[]
  raceResult      RaceResult[]
  SprintResult    SprintResult[]

  @@unique([first_name, last_name])
}

model Constructor {
  id           String         @id @default(uuid())
  name         String
  country      String
  is_active    Boolean
  driver       Driver[]
  qualifying   Qualifying[]
  raceResult   RaceResult[]
  SprintResult SprintResult[]

  @@unique([name, country])
}

model Circuit {
  id      String @id @default(uuid())
  name    String
  city    String
  country String
  races   Race[]

  @@unique([city, country])
}

model Season {
  year  Int    @unique
  races Race[]
}

model Race {
  id           String         @id @default(uuid())
  year         Season         @relation(fields: [seasonYear], references: [year])
  seasonYear   Int
  round        Int            @default(0)
  circuit      Circuit        @relation(fields: [circuitId], references: [id])
  circuitId    String
  name         String
  date         DateTime       @db.Date
  quali_date   DateTime       @db.Date
  sprint_date  DateTime?      @db.Date
  qualifying   Qualifying[]
  raceResult   RaceResult[]
  SprintResult SprintResult[]

  @@unique([date, circuitId])
}

model Qualifying {
  id            String      @id @default(uuid())
  race          Race        @relation(fields: [raceId], references: [id])
  driver        Driver      @relation(fields: [driverId], references: [id])
  team          Constructor @relation(fields: [constructorId], references: [id])
  number        Int
  position      Int
  q1            String
  q2            String
  q3            String
  raceId        String
  driverId      String
  constructorId String
}

model RaceResult {
  id                   String      @id @default(uuid())
  race                 Race        @relation(fields: [raceId], references: [id])
  driver               Driver      @relation(fields: [driverId], references: [id])
  team                 Constructor @relation(fields: [constructorId], references: [id])
  number               Int
  grid_position        Int
  end_position         Int
  points               Float
  laps                 Int
  time                 String
  time_in_milliseconds String
  fastest_lap          Int
  fastest_lap_time     String
  fastest_lap_speed    String
  raceId               String
  driverId             String
  constructorId        String
}

model SprintResult {
  id                   String      @id @default(uuid())
  race                 Race        @relation(fields: [raceId], references: [id])
  driver               Driver      @relation(fields: [driverId], references: [id])
  team                 Constructor @relation(fields: [constructorId], references: [id])
  number               Int
  grid_position        Int
  end_position         Int
  points               Float
  laps                 Int
  time                 String
  time_in_milliseconds String
  fastest_lap          Int
  fastest_lap_time     String
  fastest_lap_speed    String
  raceId               String
  driverId             String
  constructorId        String
}

// run this to update the model on the DB npx prisma migrate dev --name init
